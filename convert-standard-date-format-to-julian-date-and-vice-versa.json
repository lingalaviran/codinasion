{
  "slug": "convert-standard-date-format-to-julian-date-and-vice-versa",
  "title": "Convert Standard Date Format To Julian Date And Vice Versa",
  "typescript": "function standardToJulian(date: string): string {\n    const [year, month, day] = date.split('-').map(Number);\n    const julianDay = getDayOfYear(year, month, day);\n    return `${year}-${pad(julianDay, 3)}`;\n}\n\nfunction julianToStandard(julianDate: string): string {\n    const [year, dayOfYear] = julianDate.split('-').map(Number);\n    const date = getDateFromDayOfYear(year, dayOfYear);\n    const month = pad(date.getMonth() + 1, 2);\n    const day = pad(date.getDate(), 2);\n    return `${year}-${month}-${day}`;\n}\n\nfunction getDayOfYear(year: number, month: number, day: number): number {\n    const date = new Date(year, month - 1, day);\n    const startOfYear = new Date(year, 0, 0);\n    const diff = +date - +startOfYear;\n    const oneDay = 1000 * 60 * 60 * 24;\n    return Math.floor(diff / oneDay);\n}\n\nfunction getDateFromDayOfYear(year: number, dayOfYear: number): Date {\n    const date = new Date(year, 0); // January 1st\n    date.setDate(dayOfYear);\n    return date;\n}\n\nfunction pad(num: number, size: number): string {\n    let str = num.toString();\n    while (str.length < size) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n// Example usage:\nconst standardDate = '2022-02-22';\nconst julianDate = '22-053';\n\nconsole.log(`Standard to Julian: ${standardToJulian(standardDate)}`);\nconsole.log(`Julian to Standard: ${julianToStandard(julianDate)}`);\n",
  "description": "\n## Write a program to convert standard date format to julian date and vice-versa\n\nA Julian date is a way of displaying a date that combines the current year with the number of days since the beginning of the year. For example, January 1, 2007 is 2007001, and December 31, 2007 is 2007365.\r\n\r\nThe first two digits of a Julian date represent the year, and the last three digits represent the number of days since the beginning of the year. For example, 21-001 represents January 1, 2021, and 22-165 represents June 14, 2022.\r\n\r\n### Example\r\n\r\n```\r\nInput  : 2023-06-10\r\nOutput : 2023160\r\n```\n\n---\n",
  "trackId": 5460,
  "lastUpdated": "2024-02-24T09:01:57Z",
  "contributors": [
    "pranavsilimkhan",
    "harshraj8843",
    "magar51"
  ],
  "r": "# Function to convert standard date format to Julian date\nstandard_to_julian <- function(date) {\n  parts <- unlist(strsplit(date, \"-\"))\n  year <- as.numeric(parts[1])\n  month <- as.numeric(parts[2])\n  day <- as.numeric(parts[3])\n  \n  julian_day <- as.numeric(format(as.Date(date), \"%j\"))\n  julian_year <- as.numeric(format(as.Date(date), \"%y\"))\n  \n  return(paste(julian_year, sprintf(\"%03d\", julian_day), sep = \"-\"))\n}\n\n# Function to convert Julian date format to standard date format\njulian_to_standard <- function(julian_date) {\n  parts <- unlist(strsplit(julian_date, \"-\"))\n  julian_year <- as.numeric(parts[1])\n  julian_day <- as.numeric(parts[2])\n  \n  standard_date <- as.Date(paste0(\"20\", julian_year, \"-01-01\")) + julian_day - 1\n  \n  return(as.character(standard_date))\n}\n\n# Example usage:\nstandard_date <- \"2022-02-22\"\njulian_date <- \"22-053\"\n\ncat(\"Standard to Julian:\", standard_to_julian(standard_date), \"\\n\")\ncat(\"Julian to Standard:\", julian_to_standard(julian_date), \"\\n\")\n",
  "python": "import datetime\n\n#Function to convert standard input date into julian date\ndef stddate_to_jd (std_date):\n    fmt='%Y-%m-%d'\n    converted_date = datetime.datetime.strptime(std_date, fmt)\n    converted_date = converted_date.timetuple()\n    jul_date = str(converted_date.tm_year) + '' + str(converted_date.tm_yday)\n    return(jul_date)\n\n#Function to convert julian input date into standard date\ndef jd_to_stddate (jdate):\n    fmt = '%Y%j'\n    date_std = datetime.datetime.strptime(jdate, fmt).date()\n    return(date_std)\n\n\t\nprint('Please provide input date to be converted : ')\ninput_date = input()\n\nif len(input_date) == 10:\n   return_val = stddate_to_jd(input_date)\n   print(\"Converted date is : \", return_val)\nelif len(input_date) == 7:\n   return_val = jd_to_stddate(input_date)\n   print(\"Converted date is : \" ,return_val)\nelse:\n   print(\"Incorrect format of date. Please provide correct format.\")\n",
  "languages": [
    "typescript",
    "r",
    "python"
  ]
}